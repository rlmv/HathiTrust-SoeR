

__author__ = 'robertmarchman'

import urllib2
import json

BIB_BASEURL = 'http://catalog.hathitrust.org/api/volumes/'

ID_TYPES = ['oclc',
            'lccn',
            'issn',
            'isbn',
            'htid',
            'recordnumber',
            ]

REQUEST_TYPES = ['json']


class HTBib(object):

    def __init__(self):
        pass



    def single_bib_request(self, id_type, id_value, full=False):
        """ 
        Retrieves and returns a loaded json object cooresponding to parameters

        """
        url = self._bib_url_single(id_type, id_value, full)
        r = urllib2.urlopen(url)
        return json.load(r)

    def retrieve_request(self, request_url):
        """ 
        Returns the request detailed in :param request_url: which should
        be generated by _multi_id_url or _single_id_url.

        """
        return urllib2.urlopen(request_url)

    def _bib_url_single(self, id_type, id_value, full=False, return_type='json'):
        """ 
        Build a single-identifier json request url from the passed parameters

        :param id_type: string from ID_TYPES
        :param id_value: identifier of type id_type
        :param full: toggles full/brief 
        :param return_type: currently json is the only available return type

        """
        
        if full == False:
            detail = 'brief' 
        else:
            detail = 'full'

        url = ''.join([BIB_BASEURL, detail, '/', id_type, '/', id_value, '.', return_type])
        return url
            

    def _multi_id_url(self, ids, full=False, return_type='json'):
        """ 
        :param ids: an iterable of dictionary entries, with the id value (string) keyed by
        the id type (can be int or string). Eg:
            ids = [{id:1, oclc:45678}, {lccn:70628581}]
        See the HathiTrust bib API documentation for more details, and information
        on the id:MyID tag. Note that with the current HathiTrust API, ids can have at most 20 
        record requests in it. (Or maybe not - requests for more seem to work just fine...)

        :param full: specifes full/brief detail - full includes MARCXML fields.
        :param return_type: currently json is the only type available

        """

        if full == False:
            detail = 'brief' 
        else:
            detail = 'full'

        search_string = "|".join([";".join([key + ":" + str(spec[key]) for key in spec]) for spec in ids])

        url = "".join([BIB_BASEURL, detail, '/', return_type, '/', search_string])
        return url


    def multi_id_request(self, ids, full=False):

        pass

if __name__ == "__main__":
    
    bquery = HTBib()
    print bquery._bib_url_single('htid', 'mdp.39015012849119249', full=True)
    js = bquery.single_bib_request('htid', 'mdp.39015012849119249', full=True)
    print json.dumps(js, indent=2)
    print js['records'].keys()

    
    sspecs = [{"id":"1", "oclc":45678, "lccn":"70628581"}, {"id":"1", "oclc":"45678", "lccn":"70628581"}, {"id":"1", "oclc":45678, "lccn":"70628581"}, {"id":"2", "oclc":"45678", "lccn":"70628581"}]

    print sspecs


    print json.dumps(json.load(bquery.retrieve_request(bquery._multi_id_url(sspecs))), indent=4)
